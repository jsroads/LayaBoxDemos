var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var MyScrollView_1 = require("./smile/MyScrollView");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("smile/MyScrollView.ts", MyScrollView_1.default);
    };
    GameConfig.width = 640;
    GameConfig.height = 1136;
    GameConfig.scaleMode = "fixedwidth";
    GameConfig.screenMode = "none";
    GameConfig.alignV = "top";
    GameConfig.alignH = "left";
    GameConfig.startScene = "smile/MyScrollView.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();

},{"./smile/MyScrollView":6}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();

},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by jsroads on 2019-05-28.16:53
 * Note:
 */
var DIRECTION;
(function (DIRECTION) {
    DIRECTION[DIRECTION["LEFT"] = -1] = "LEFT";
    DIRECTION[DIRECTION["RIGHT"] = 1] = "RIGHT";
})(DIRECTION = exports.DIRECTION || (exports.DIRECTION = {}));
exports.CD_SPACE = 120;
exports.CD_GRID = 316;
var DataConst = /** @class */ (function () {
    function DataConst() {
        this._startId = 1;
    }
    Object.defineProperty(DataConst.prototype, "startId", {
        get: function () {
            return this._startId;
        },
        set: function (value) {
            this._startId = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataConst, "ins", {
        get: function () {
            if (!this._ins)
                this._ins = new DataConst();
            return this._ins;
        },
        set: function (value) {
            this._ins = value;
        },
        enumerable: true,
        configurable: true
    });
    return DataConst;
}());
exports.default = DataConst;

},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by jsroads on 2019-05-28.17:09
 * Note:
 */
var GameHelper = /** @class */ (function () {
    function GameHelper() {
    }
    Object.defineProperty(GameHelper, "ins", {
        get: function () {
            if (!this._ins)
                this._ins = new GameHelper();
            return this._ins;
        },
        set: function (value) {
            this._ins = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 深度克隆
     * 对象可以完全脱离原对象
     */
    GameHelper.prototype.deepCopy = function (source) {
        var target = Array.isArray(source) ? [] : {};
        for (var k in source) {
            if (typeof source[k] === 'object') {
                target[k] = this.deepCopy(source[k]);
            }
            else {
                target[k] = source[k];
            }
        }
        return target;
    };
    GameHelper.prototype.getZorderByIndex = function (index) {
        var z = 0;
        switch (index) {
            case 4:
                z = 8;
                break;
            case 5:
                z = 7;
                break;
            case 3:
                z = 6;
                break;
            case 6:
                z = 5;
                break;
            case 2:
                z = 4;
                break;
            case 7:
                z = 3;
                break;
            case 1:
                z = 2;
                break;
            case 8:
                z = 1;
                break;
            case 0:
                z = 0;
                break;
        }
        return z;
    };
    return GameHelper;
}());
exports.default = GameHelper;

},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by jsroads on 2019-05-28.16:28
 * Note:
 */
var layaMaxUI_1 = require("../ui/layaMaxUI");
var DataConst_1 = require("./DataConst");
var MyScrollItemUI = layaMaxUI_1.ui.smile.MyScrollItemUI;
var GameHelper_1 = require("./GameHelper");
var MyScrollView = /** @class */ (function (_super) {
    __extends(MyScrollView, _super);
    function MyScrollView(data) {
        var _this = _super.call(this) || this;
        _this.SINGLE_SCALE = 640;
        _this.info = data;
        _this.size(DataConst_1.CD_GRID, DataConst_1.CD_GRID);
        _this.anchorX = _this.anchorY = 0.5;
        _this.SINGLE_SCALE = _this.info.p_width / 80;
        return _this;
    }
    MyScrollView.prototype.onEnable = function () {
        this.y = this.info.p_height / 2;
        this.x = (this.info.index - 4) * DataConst_1.CD_SPACE + this.info.p_width / 2;
        // console.log("jsroads------ this.x:" + JSON.stringify(this.x));
        this.setCDState();
        this.resetRightScale();
    };
    MyScrollView.prototype.setCDState = function () {
        this.porkImage.loadImage("pork/" + this.info.icon);
    };
    MyScrollView.prototype.setTargetPos = function () {
        Laya.Tween.clearAll(this);
        var targetX = (this.info.index - 4) * DataConst_1.CD_SPACE + this.info.p_width / 2;
        var scale = (this.info.p_width * 0.5 - Math.abs((this.info.p_width * 0.5 - targetX))) / this.SINGLE_SCALE * 0.01 + 0.6;
        Laya.Tween.to(this, { x: targetX }, 150);
        Laya.Tween.to(this.porkImage, { scaleX: scale, scaleY: scale }, 150);
        if (this.info.index == 4) {
            Laya.timer.loop(30, this, this.updateTime, []);
        }
    };
    MyScrollView.prototype.resetRightScale = function () {
        var scale = (this.info.p_width * 0.5 - Math.abs((this.info.p_width * 0.5 - this.x))) / this.SINGLE_SCALE * 0.01 + 0.6;
        this.porkImage.scale(scale, scale);
        this.porkImage.scaleX;
        var zOrder = GameHelper_1.default.ins.getZorderByIndex(this.info.index);
        if (zOrder != this.zOrder) {
            this.zOrder = zOrder;
        }
    };
    MyScrollView.prototype.stopTime = function () {
        this.porkImage.rotation = 0;
        Laya.timer.clear(this, this.updateTime);
    };
    MyScrollView.prototype.updateTime = function () {
        // this.porkImage.rotation += 1;
    };
    return MyScrollView;
}(MyScrollItemUI));
exports.default = MyScrollView;

},{"../ui/layaMaxUI":7,"./DataConst":3,"./GameHelper":4}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Created by jsroads on 2019-05-28.16:27
 * Note:
 */
var layaMaxUI_1 = require("../ui/layaMaxUI");
var DataConst_1 = require("./DataConst");
var MyScrollViewUI = layaMaxUI_1.ui.smile.MyScrollViewUI;
var Handler = Laya.Handler;
var Event = Laya.Event;
var GameHelper_1 = require("./GameHelper");
var MyScrollItem_1 = require("./MyScrollItem");
exports.MIDDLE_SIZE = 4;
var MyScrollView = /** @class */ (function (_super) {
    __extends(MyScrollView, _super);
    function MyScrollView() {
        var _this = _super.call(this) || this;
        _this.cdViewList = [];
        _this.cdTemptList = [];
        _this.startIndex = 0;
        _this.endIndex = 0;
        _this.rate = 0.95;
        return _this;
    }
    MyScrollView.prototype.onAwake = function () {
        this.on(MyScrollView.PORK_CHANGE, this, this.cdChange);
        this.loadJSON();
        this.initEvent();
    };
    MyScrollView.prototype.initCD = function () {
        if (!DataConst_1.default.ins.startId) {
            DataConst_1.default.ins.startId = 1;
        }
        this.porkList = [];
        for (var key in this.porkJson) {
            this.porkList.push(this.porkJson[key]);
        }
        this.porkList.sort(function (a, b) {
            return a.tid > b.tid ? 1 : -1;
        });
        this.startIndex = this.getPorkIndex(DataConst_1.default.ins.startId);
        this.startIndex = this.startIndex % this.porkList.length;
        this.endIndex = this.startIndex;
        this.cdTemptList.push(this.getCurMusicFromCD());
        for (var i = 0; i < exports.MIDDLE_SIZE; i++) {
            var cd = void 0;
            cd = this.getNextMusicFromCD();
            this.cdTemptList.push(cd);
            cd = this.getPreMusicFromCD();
            this.cdTemptList.unshift(cd);
        }
        // console.log("jsroads------cdTemptList:" + JSON.stringify(this.cdTemptList));
        for (var i = 0; i < this.cdTemptList.length; i++) {
            var msg = this.cdTemptList[i];
            msg.index = i;
            var cdViewListElement = new MyScrollItem_1.default(msg);
            if (cdViewListElement.info.index == 4) {
                this.setCurrentMusicName(cdViewListElement.info);
            }
            this.cdViewList.push(cdViewListElement);
            this.container.addChild(cdViewListElement);
        }
    };
    MyScrollView.prototype.setCurrentMusicName = function (info) {
        // SoundMgr.Ins.playSound(SoundURL.PICK);
        this.currentPork = info;
        this.nameText.text = info.name;
    };
    MyScrollView.prototype.getPreMusicFromCD = function () {
        this.startIndex--;
        if (this.startIndex < 0) {
            this.startIndex = this.porkList.length - 1;
        }
        var cd = GameHelper_1.default.ins.deepCopy(this.porkList[this.startIndex]);
        cd.p_height = this.container.height;
        cd.p_width = this.container.width;
        return cd;
    };
    MyScrollView.prototype.getNextMusicFromCD = function () {
        this.endIndex++;
        if (this.endIndex >= this.porkList.length) {
            this.endIndex = 0;
        }
        var cd = GameHelper_1.default.ins.deepCopy(this.porkList[this.endIndex]);
        cd.p_height = this.container.height;
        cd.p_width = this.container.width;
        return cd;
    };
    MyScrollView.prototype.getPorkIndex = function (tid) {
        for (var i = 0; i < this.porkList.length; i++) {
            var cdListElement = this.porkList[i];
            if (tid == cdListElement.tid) {
                return i;
            }
        }
        return 0;
    };
    MyScrollView.prototype.getCurMusicFromCD = function () {
        var cd = GameHelper_1.default.ins.deepCopy(this.porkList[this.startIndex]);
        cd.p_height = this.container.height;
        cd.p_width = this.container.width;
        return cd;
    };
    MyScrollView.prototype.initEvent = function () {
        var _this = this;
        this.container.on(Event.MOUSE_DOWN, this, function (e) {
            Laya.timer.clear(_this, _this.updateTime);
            _this.resetCDElement();
            _this.stage.on(Event.MOUSE_OUT, _this, _this.onMouseUp);
            _this.stage.on(Event.MOUSE_UP, _this, _this.onMouseUp);
            Laya.stage.on(Event.MOUSE_MOVE, _this, _this.onMouseMove);
            _this.beginTime = Laya.Browser.now();
            _this.beginPoint = new Laya.Point(e.stageX, e.stageY);
            _this.tempPoint = new Laya.Point(e.stageX, e.stageY);
        });
        this.leftBtn.on(Event.CLICK, this, function () {
            _this.leftMusic();
        });
        this.rightBtn.on(Event.CLICK, this, function () {
            _this.rightMusic();
        });
    };
    MyScrollView.prototype.rightChange = function () {
        for (var i = 0; i < this.cdViewList.length; i++) {
            var cdViewListElement = this.cdViewList[i];
            if (cdViewListElement.x > 900) {
                return true;
            }
        }
        return false;
    };
    MyScrollView.prototype.leftChange = function () {
        for (var i = 0; i < this.cdViewList.length; i++) {
            var cdViewListElement = this.cdViewList[i];
            if (cdViewListElement.x < -260) {
                return true;
            }
        }
        return false;
    };
    MyScrollView.prototype.getDistance = function (pos1, pos2) {
        var pos = new Laya.Point(pos2.x - pos1.x, pos2.y - pos1.y);
        return Math.sqrt(pos.x * pos.x + pos.y * pos.y);
    };
    MyScrollView.prototype.setCardPosition = function (distance) {
        for (var i = 0; i < this.cdViewList.length; i++) {
            var cdViewListElement = this.cdViewList[i];
            cdViewListElement.x += Math.floor(distance);
            cdViewListElement.resetRightScale();
        }
        if (this.leftChange()) {
            this.cdChange(DataConst_1.DIRECTION.LEFT);
        }
        else if (this.rightChange()) {
            this.cdChange(DataConst_1.DIRECTION.RIGHT);
        }
    };
    /**移到事件处理*/
    MyScrollView.prototype.onMouseMove = function (e) {
        var point = new Laya.Point(e.stageX, e.stageY);
        var distance = point.x - this.tempPoint.x;
        this.tempPoint = point;
        this.direction = distance > 0 ? DataConst_1.DIRECTION.RIGHT : DataConst_1.DIRECTION.LEFT;
        this.setCardPosition(distance);
    };
    /**抬起事件处理*/
    MyScrollView.prototype.onMouseUp = function (e) {
        // console.log("jsroads------onMouseUp:" + JSON.stringify("onMouseUp"));
        Laya.stage.off(Event.MOUSE_UP, this, this.onMouseUp);
        Laya.stage.off(Event.MOUSE_OUT, this, this.onMouseUp);
        Laya.stage.off(Event.MOUSE_MOVE, this, this.onMouseMove);
        this.endTime = Laya.Browser.now();
        this.endTimePoint = new Laya.Point(e.stageX, e.stageY);
        var distance = this.getDistance(this.endTimePoint, this.beginPoint);
        if (Math.abs(distance) <= 5) {
            this.setPosToTarget();
            return;
        }
        this.speed = Math.abs(distance) / (this.endTime - this.beginTime) * 10;
        if ((this.endTimePoint.x - this.beginPoint.x) > 0) {
            this.speed *= 1;
        }
        else {
            this.speed *= -1;
        }
        Laya.timer.loop(10, this, this.updateTime, []);
    };
    MyScrollView.prototype.updateTime = function (timer, dt) {
        this.speed = this.speed * this.rate;
        if (Math.abs(this.speed) < 1) {
            Laya.timer.clear(this, this.updateTime);
            this.setPosToTarget();
        }
        for (var i = 0; i < this.cdViewList.length; i++) {
            var cdViewListElement = this.cdViewList[i];
            cdViewListElement.x += Math.floor(this.speed);
        }
        if (this.leftChange()) {
            this.cdChange(DataConst_1.DIRECTION.LEFT);
        }
        else if (this.rightChange()) {
            this.cdChange(DataConst_1.DIRECTION.RIGHT);
        }
    };
    MyScrollView.prototype.onOpened = function (param) {
    };
    MyScrollView.prototype.loadJSON = function () {
        var _this = this;
        var porkURL = "json/pork.json";
        Laya.loader.load(porkURL, Handler.create(null, function (success) {
            _this.porkJson = Laya.loader.getRes(porkURL);
            console.log("smile------:" + JSON.stringify(_this.porkJson));
            _this.initCD();
        }));
    };
    MyScrollView.prototype.cdChange = function (changeEvent) {
        this.changeEvent = changeEvent;
        if (this.changeEvent == DataConst_1.DIRECTION.LEFT) {
            var first = this.cdViewList.shift();
            first.x = this.cdViewList[this.cdViewList.length - 1].x + DataConst_1.CD_SPACE;
            first.info = this.getNextMusicFromCD();
            this.cdViewList.push(first);
        }
        else {
            var end = this.cdViewList.pop();
            end.x = this.cdViewList[0].x - DataConst_1.CD_SPACE;
            end.info = this.getPreMusicFromCD();
            this.cdViewList.unshift(end);
        }
        this.setCDScale();
    };
    MyScrollView.prototype.setCDScale = function () {
        for (var i = 0; i < this.cdViewList.length; i++) {
            var cdViewListElement = this.cdViewList[i];
            cdViewListElement.info.index = i;
            if (i == 4) {
                this.setCurrentMusicName(cdViewListElement.info);
            }
            cdViewListElement.setCDState();
            cdViewListElement.resetRightScale();
        }
    };
    MyScrollView.prototype.resetCDElement = function () {
        for (var i = 0; i < this.cdViewList.length; i++) {
            var cdViewListElement = this.cdViewList[i];
            cdViewListElement.stopTime();
        }
    };
    MyScrollView.prototype.setPosToTarget = function () {
        for (var i = 0; i < this.cdViewList.length; i++) {
            var cdViewListElement = this.cdViewList[i];
            cdViewListElement.setTargetPos();
        }
    };
    MyScrollView.prototype.leftMusic = function () {
        this.resetCDElement();
        this.cdChange(DataConst_1.DIRECTION.RIGHT);
        this.setPosToTarget();
    };
    MyScrollView.prototype.rightMusic = function () {
        this.resetCDElement();
        this.cdChange(DataConst_1.DIRECTION.LEFT);
        this.setPosToTarget();
    };
    MyScrollView.PORK_CHANGE = "pork_change"; //PORK改变
    return MyScrollView;
}(MyScrollViewUI));
exports.default = MyScrollView;

},{"../ui/layaMaxUI":7,"./DataConst":3,"./GameHelper":4,"./MyScrollItem":5}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var View = Laya.View;
var Scene = Laya.Scene;
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var smile;
    (function (smile) {
        var MyScrollItemUI = /** @class */ (function (_super) {
            __extends(MyScrollItemUI, _super);
            function MyScrollItemUI() {
                return _super.call(this) || this;
            }
            MyScrollItemUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("smile/MyScrollItem");
            };
            return MyScrollItemUI;
        }(View));
        smile.MyScrollItemUI = MyScrollItemUI;
        REG("ui.smile.MyScrollItemUI", MyScrollItemUI);
        var MyScrollViewUI = /** @class */ (function (_super) {
            __extends(MyScrollViewUI, _super);
            function MyScrollViewUI() {
                return _super.call(this) || this;
            }
            MyScrollViewUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("smile/MyScrollView");
            };
            return MyScrollViewUI;
        }(Scene));
        smile.MyScrollViewUI = MyScrollViewUI;
        REG("ui.smile.MyScrollViewUI", MyScrollViewUI);
    })(smile = ui.smile || (ui.smile = {}));
})(ui = exports.ui || (exports.ui = {}));

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL0FwcGxpY2F0aW9ucy9MYXlhQWlySURFMi5hcHAvQ29udGVudHMvUmVzb3VyY2VzL2FwcC9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwic3JjL0dhbWVDb25maWcudHMiLCJzcmMvTWFpbi50cyIsInNyYy9zbWlsZS9EYXRhQ29uc3QudHMiLCJzcmMvc21pbGUvR2FtZUhlbHBlci50cyIsInNyYy9zbWlsZS9NeVNjcm9sbEl0ZW0udHMiLCJzcmMvc21pbGUvTXlTY3JvbGxWaWV3LnRzIiwic3JjL3VpL2xheWFNYXhVSS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNWQSxnR0FBZ0c7QUFDaEcscURBQStDO0FBQy9DOztFQUVFO0FBQ0Y7SUFhSTtJQUFjLENBQUM7SUFDUixlQUFJLEdBQVg7UUFDSSxJQUFJLEdBQUcsR0FBYSxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUM3QyxHQUFHLENBQUMsdUJBQXVCLEVBQUMsc0JBQVksQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFoQk0sZ0JBQUssR0FBUSxHQUFHLENBQUM7SUFDakIsaUJBQU0sR0FBUSxJQUFJLENBQUM7SUFDbkIsb0JBQVMsR0FBUSxZQUFZLENBQUM7SUFDOUIscUJBQVUsR0FBUSxNQUFNLENBQUM7SUFDekIsaUJBQU0sR0FBUSxLQUFLLENBQUM7SUFDcEIsaUJBQU0sR0FBUSxNQUFNLENBQUM7SUFDckIscUJBQVUsR0FBSywwQkFBMEIsQ0FBQztJQUMxQyxvQkFBUyxHQUFRLEVBQUUsQ0FBQztJQUNwQixnQkFBSyxHQUFTLEtBQUssQ0FBQztJQUNwQixlQUFJLEdBQVMsS0FBSyxDQUFDO0lBQ25CLHVCQUFZLEdBQVMsS0FBSyxDQUFDO0lBQzNCLDRCQUFpQixHQUFTLElBQUksQ0FBQztJQU0xQyxpQkFBQztDQWxCRCxBQWtCQyxJQUFBO2tCQWxCb0IsVUFBVTtBQW1CL0IsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDOzs7OztBQ3hCbEIsMkNBQXNDO0FBQ3RDO0lBQ0M7UUFDQyxnQkFBZ0I7UUFDaEIsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBVSxDQUFDLEtBQUssRUFBRSxvQkFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztZQUNsRSxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFVLENBQUMsS0FBSyxFQUFFLG9CQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDNUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxvQkFBVSxDQUFDLFNBQVMsQ0FBQztRQUM1QyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxvQkFBVSxDQUFDLFVBQVUsQ0FBQztRQUM5QyxvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsR0FBRyxvQkFBVSxDQUFDLGlCQUFpQixDQUFDO1FBRTFELG9EQUFvRDtRQUNwRCxJQUFJLG9CQUFVLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU07WUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM5RixJQUFJLG9CQUFVLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztZQUFFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzNGLElBQUksb0JBQVUsQ0FBQyxJQUFJO1lBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBRTdCLGdEQUFnRDtRQUNoRCxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDckksQ0FBQztJQUVELDhCQUFlLEdBQWY7UUFDQywrQ0FBK0M7UUFDL0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELDZCQUFjLEdBQWQ7UUFDQyxZQUFZO1FBQ1osb0JBQVUsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsb0JBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBQ0YsV0FBQztBQUFELENBL0JBLEFBK0JDLElBQUE7QUFDRCxPQUFPO0FBQ1AsSUFBSSxJQUFJLEVBQUUsQ0FBQzs7Ozs7QUNsQ1g7OztHQUdHO0FBQ0gsSUFBWSxTQUdYO0FBSEQsV0FBWSxTQUFTO0lBQ2pCLDBDQUFTLENBQUE7SUFDVCwyQ0FBUyxDQUFBO0FBQ2IsQ0FBQyxFQUhXLFNBQVMsR0FBVCxpQkFBUyxLQUFULGlCQUFTLFFBR3BCO0FBQ1ksUUFBQSxRQUFRLEdBQUcsR0FBRyxDQUFDO0FBQ2YsUUFBQSxPQUFPLEdBQUcsR0FBRyxDQUFDO0FBbUIzQjtJQUFBO1FBaUJZLGFBQVEsR0FBVSxDQUFDLENBQUM7SUFFaEMsQ0FBQztJQWxCRyxzQkFBSSw4QkFBTzthQUFYO1lBQ0ksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3pCLENBQUM7YUFFRCxVQUFZLEtBQWE7WUFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDMUIsQ0FBQzs7O09BSkE7SUFLRCxzQkFBVyxnQkFBRzthQUFkO1lBQ0ksSUFBRyxDQUFDLElBQUksQ0FBQyxJQUFJO2dCQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQztZQUMzQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDckIsQ0FBQzthQUVELFVBQWUsS0FBZ0I7WUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFDdEIsQ0FBQzs7O09BSkE7SUFRTCxnQkFBQztBQUFELENBbkJBLEFBbUJDLElBQUE7Ozs7OztBQy9DRDs7O0dBR0c7QUFDSDtJQUFBO0lBNERBLENBQUM7SUEzREcsc0JBQVcsaUJBQUc7YUFBZDtZQUNJLElBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSTtnQkFBRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7WUFDNUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3JCLENBQUM7YUFFRCxVQUFlLEtBQWlCO1lBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLENBQUM7OztPQUpBO0lBT0Q7OztPQUdHO0lBQ0ksNkJBQVEsR0FBZixVQUFnQixNQUFNO1FBQ2xCLElBQUksTUFBTSxHQUFRLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2xELEtBQUssSUFBSSxDQUFDLElBQUksTUFBTSxFQUFFO1lBQ2xCLElBQUksT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO2dCQUMvQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUN2QztpQkFBTTtnQkFDSCxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ3hCO1NBQ0o7UUFDRCxPQUFPLE1BQU0sQ0FBQTtJQUNqQixDQUFDO0lBQ00scUNBQWdCLEdBQXZCLFVBQXdCLEtBQWE7UUFDakMsSUFBSSxDQUFDLEdBQVcsQ0FBQyxDQUFDO1FBQ2xCLFFBQVEsS0FBSyxFQUFFO1lBQ1gsS0FBSyxDQUFDO2dCQUNGLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ04sTUFBTTtZQUNWLEtBQUssQ0FBQztnQkFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNOLE1BQU07WUFDVixLQUFLLENBQUM7Z0JBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDTixNQUFNO1lBQ1YsS0FBSyxDQUFDO2dCQUNGLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ04sTUFBTTtZQUNWLEtBQUssQ0FBQztnQkFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNOLE1BQU07WUFDVixLQUFLLENBQUM7Z0JBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDTixNQUFNO1lBQ1YsS0FBSyxDQUFDO2dCQUNGLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ04sTUFBTTtZQUNWLEtBQUssQ0FBQztnQkFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNOLE1BQU07WUFDVixLQUFLLENBQUM7Z0JBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDTixNQUFNO1NBRWI7UUFDRCxPQUFPLENBQUMsQ0FBQTtJQUNaLENBQUM7SUFDTCxpQkFBQztBQUFELENBNURBLEFBNERDLElBQUE7Ozs7OztBQ2hFRDs7O0dBR0c7QUFDSCw2Q0FBbUM7QUFDbkMseUNBQXFEO0FBQ3JELElBQU8sY0FBYyxHQUFHLGNBQUUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDO0FBQ2hELDJDQUFzQztBQUV0QztJQUEwQyxnQ0FBYztJQUlwRCxzQkFBWSxJQUFXO1FBQXZCLFlBQ0ksaUJBQU8sU0FLVjtRQVJNLGtCQUFZLEdBQVcsR0FBRyxDQUFDO1FBSTlCLEtBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLEtBQUksQ0FBQyxJQUFJLENBQUMsbUJBQU8sRUFBRSxtQkFBTyxDQUFDLENBQUM7UUFDNUIsS0FBSSxDQUFDLE9BQU8sR0FBRyxLQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQztRQUNsQyxLQUFJLENBQUMsWUFBWSxHQUFHLEtBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzs7SUFDL0MsQ0FBQztJQUVNLCtCQUFRLEdBQWY7UUFDSSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsb0JBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFDbEUsaUVBQWlFO1FBQ2pFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVNLGlDQUFVLEdBQWpCO1FBQ0ksSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVNLG1DQUFZLEdBQW5CO1FBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxvQkFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUN2RSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksR0FBRyxHQUFHLENBQUM7UUFDdkgsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUMsQ0FBQyxFQUFFLE9BQU8sRUFBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNuRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRTtZQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUE7U0FDakQ7SUFDTCxDQUFDO0lBR00sc0NBQWUsR0FBdEI7UUFDSSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ3RILElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUN0QixJQUFJLE1BQU0sR0FBRyxvQkFBVSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlELElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBRU0sK0JBQVEsR0FBZjtRQUNJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzNDLENBQUM7SUFFTyxpQ0FBVSxHQUFsQjtRQUNJLGdDQUFnQztJQUNwQyxDQUFDO0lBRUwsbUJBQUM7QUFBRCxDQXZEQSxBQXVEQyxDQXZEeUMsY0FBYyxHQXVEdkQ7Ozs7OztBQ2hFRDs7O0dBR0c7QUFDSCw2Q0FBbUM7QUFDbkMseUNBQWtFO0FBQ2xFLElBQU8sY0FBYyxHQUFHLGNBQUUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDO0FBQ2hELElBQU8sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDOUIsSUFBTyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztBQUUxQiwyQ0FBc0M7QUFDdEMsK0NBQTBDO0FBQzdCLFFBQUEsV0FBVyxHQUFHLENBQUMsQ0FBQztBQUM3QjtJQUEwQyxnQ0FBYztJQXFCcEQ7UUFBQSxZQUNJLGlCQUFPLFNBQ1Y7UUFuQk8sZ0JBQVUsR0FBd0IsRUFBRSxDQUFDO1FBV3JDLGlCQUFXLEdBQWUsRUFBRSxDQUFDO1FBQzdCLGdCQUFVLEdBQVcsQ0FBQyxDQUFDO1FBQ3ZCLGNBQVEsR0FBVyxDQUFDLENBQUM7UUFHckIsVUFBSSxHQUFXLElBQUksQ0FBQzs7SUFHNUIsQ0FBQztJQUNNLDhCQUFPLEdBQWQ7UUFDSSxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFDTyw2QkFBTSxHQUFkO1FBQ0ksSUFBSSxDQUFDLG1CQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRTtZQUN4QixtQkFBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbkIsS0FBSyxJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMxQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7WUFDcEIsT0FBTyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsbUJBQVMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQ3pELElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO1FBQ2hELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxtQkFBVyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLElBQUksRUFBRSxTQUFBLENBQUM7WUFDUCxFQUFFLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDL0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDMUIsRUFBRSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQzlCLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2hDO1FBQ0QsK0VBQStFO1FBQy9FLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5QyxJQUFJLEdBQUcsR0FBUSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLHNCQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDOUMsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRTtnQkFDbkMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3BEO1lBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQzlDO0lBQ0wsQ0FBQztJQUNNLDBDQUFtQixHQUExQixVQUEyQixJQUFXO1FBQ2xDLHlDQUF5QztRQUN6QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ25DLENBQUM7SUFDTSx3Q0FBaUIsR0FBeEI7UUFDSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDbEIsSUFBSSxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQTtTQUM3QztRQUNELElBQUksRUFBRSxHQUFHLG9CQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLEVBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDcEMsRUFBRSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUNsQyxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTSx5Q0FBa0IsR0FBekI7UUFDSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFBO1NBQ3BCO1FBQ0QsSUFBSSxFQUFFLEdBQUcsb0JBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDL0QsRUFBRSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUNwQyxFQUFFLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQ2xDLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNPLG1DQUFZLEdBQXBCLFVBQXFCLEdBQUc7UUFDcEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzNDLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsSUFBSSxHQUFHLElBQUksYUFBYSxDQUFDLEdBQUcsRUFBRTtnQkFDMUIsT0FBTyxDQUFDLENBQUM7YUFDWjtTQUNKO1FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRU0sd0NBQWlCLEdBQXhCO1FBQ0ksSUFBSSxFQUFFLEdBQUcsb0JBQVUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDakUsRUFBRSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUNwQyxFQUFFLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQ2xDLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUNPLGdDQUFTLEdBQWpCO1FBQUEsaUJBaUJDO1FBaEJHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFVBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFJLEVBQUUsS0FBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3hDLEtBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN0QixLQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUksRUFBRSxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDckQsS0FBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFJLEVBQUUsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSSxFQUFFLEtBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN4RCxLQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDcEMsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckQsS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtZQUMvQixLQUFJLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRTtZQUNoQyxLQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7UUFDckIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBQ08sa0NBQVcsR0FBbkI7UUFDSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLElBQUksaUJBQWlCLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRTtnQkFDM0IsT0FBTyxJQUFJLENBQUM7YUFDZjtTQUNKO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUVPLGlDQUFVLEdBQWxCO1FBQ0ksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQyxJQUFJLGlCQUFpQixDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtnQkFDNUIsT0FBTyxJQUFJLENBQUM7YUFDZjtTQUNKO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQztJQUNPLGtDQUFXLEdBQW5CLFVBQW9CLElBQVcsRUFBRSxJQUFXO1FBQ3hDLElBQUksR0FBRyxHQUFVLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ08sc0NBQWUsR0FBdkIsVUFBd0IsUUFBZ0I7UUFDcEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUM1QyxpQkFBaUIsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtTQUN0QztRQUNELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUNoQzthQUFNLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtTQUNqQztJQUNMLENBQUM7SUFFRCxXQUFXO0lBQ1gsa0NBQVcsR0FBWCxVQUFZLENBQVE7UUFDaEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxxQkFBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMscUJBQVMsQ0FBQyxJQUFJLENBQUM7UUFDakUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVuQyxDQUFDO0lBQ0QsV0FBVztJQUNILGdDQUFTLEdBQWpCLFVBQWtCLENBQVE7UUFDdEIsd0VBQXdFO1FBQ3hFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3RCLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUN2RSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDL0MsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7U0FDbkI7YUFBTTtZQUNILElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDcEI7UUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDbEQsQ0FBQztJQUVPLGlDQUFVLEdBQWxCLFVBQW1CLEtBQUssRUFBRSxFQUFFO1FBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3BDLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDeEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3pCO1FBQ0QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDakQ7UUFDRCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLHFCQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7U0FDaEM7YUFBTSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUMzQixJQUFJLENBQUMsUUFBUSxDQUFDLHFCQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7U0FDakM7SUFDTCxDQUFDO0lBQ0QsK0JBQVEsR0FBUixVQUFTLEtBQVU7SUFFbkIsQ0FBQztJQUNELCtCQUFRLEdBQVI7UUFBQSxpQkFRQztRQVBHLElBQUksT0FBTyxHQUFHLGdCQUFnQixDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxVQUFDLE9BQU87WUFDbkQsS0FBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBRTVELEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztJQUNPLCtCQUFRLEdBQWhCLFVBQWlCLFdBQVc7UUFDeEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLHFCQUFTLENBQUMsSUFBSSxFQUFFO1lBQ3BDLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDcEMsS0FBSyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxvQkFBUSxDQUFDO1lBQ25FLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7WUFDdkMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUNILElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDaEMsR0FBRyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxvQkFBUSxDQUFDO1lBQ3hDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7U0FDL0I7UUFDRCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUNELGlDQUFVLEdBQVY7UUFDSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDUixJQUFJLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDcEQ7WUFDRCxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUMvQixpQkFBaUIsQ0FBQyxlQUFlLEVBQUUsQ0FBQztTQUN2QztJQUNMLENBQUM7SUFDRCxxQ0FBYyxHQUFkO1FBQ0ksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNoQztJQUNMLENBQUM7SUFFRCxxQ0FBYyxHQUFkO1FBQ0ksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzdDLElBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNwQztJQUNMLENBQUM7SUFDTyxnQ0FBUyxHQUFqQjtRQUNJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLHFCQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTyxpQ0FBVSxHQUFsQjtRQUNJLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLHFCQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUExUWEsd0JBQVcsR0FBVyxhQUFhLENBQUMsQ0FBQSxRQUFRO0lBMlE5RCxtQkFBQztDQTVRRCxBQTRRQyxDQTVReUMsY0FBYyxHQTRRdkQ7a0JBNVFvQixZQUFZOzs7OztBQ2JqQyxnR0FBZ0c7QUFDaEcsSUFBTyxJQUFJLEdBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztBQUV0QixJQUFPLEtBQUssR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQ3hCLElBQUksR0FBRyxHQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO0FBQzdDLElBQWMsRUFBRSxDQXNCZjtBQXRCRCxXQUFjLEVBQUU7SUFBQyxJQUFBLEtBQUssQ0FzQnJCO0lBdEJnQixXQUFBLEtBQUs7UUFDbEI7WUFBb0Msa0NBQUk7WUFFcEM7dUJBQWUsaUJBQU87WUFBQSxDQUFDO1lBQ3ZCLHVDQUFjLEdBQWQ7Z0JBQ0ksaUJBQU0sY0FBYyxXQUFFLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUN6QyxDQUFDO1lBQ0wscUJBQUM7UUFBRCxDQVBBLEFBT0MsQ0FQbUMsSUFBSSxHQU92QztRQVBZLG9CQUFjLGlCQU8xQixDQUFBO1FBQ0QsR0FBRyxDQUFDLHlCQUF5QixFQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzlDO1lBQW9DLGtDQUFLO1lBS3JDO3VCQUFlLGlCQUFPO1lBQUEsQ0FBQztZQUN2Qix1Q0FBYyxHQUFkO2dCQUNJLGlCQUFNLGNBQWMsV0FBRSxDQUFDO2dCQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDekMsQ0FBQztZQUNMLHFCQUFDO1FBQUQsQ0FWQSxBQVVDLENBVm1DLEtBQUssR0FVeEM7UUFWWSxvQkFBYyxpQkFVMUIsQ0FBQTtRQUNELEdBQUcsQ0FBQyx5QkFBeUIsRUFBQyxjQUFjLENBQUMsQ0FBQztJQUNsRCxDQUFDLEVBdEJnQixLQUFLLEdBQUwsUUFBSyxLQUFMLFFBQUssUUFzQnJCO0FBQUQsQ0FBQyxFQXRCYSxFQUFFLEdBQUYsVUFBRSxLQUFGLFVBQUUsUUFzQmYiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbiAgICB9O1xyXG59KSgpO1xyXG4oZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyoqVGhpcyBjbGFzcyBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBMYXlhQWlySURFLCBwbGVhc2UgZG8gbm90IG1ha2UgYW55IG1vZGlmaWNhdGlvbnMuICovXHJcbmltcG9ydCBNeVNjcm9sbFZpZXcgZnJvbSBcIi4vc21pbGUvTXlTY3JvbGxWaWV3XCJcclxuLypcclxuKiDmuLjmiI/liJ3lp4vljJbphY3nva47XHJcbiovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWVDb25maWd7XHJcbiAgICBzdGF0aWMgd2lkdGg6bnVtYmVyPTY0MDtcclxuICAgIHN0YXRpYyBoZWlnaHQ6bnVtYmVyPTExMzY7XHJcbiAgICBzdGF0aWMgc2NhbGVNb2RlOnN0cmluZz1cImZpeGVkd2lkdGhcIjtcclxuICAgIHN0YXRpYyBzY3JlZW5Nb2RlOnN0cmluZz1cIm5vbmVcIjtcclxuICAgIHN0YXRpYyBhbGlnblY6c3RyaW5nPVwidG9wXCI7XHJcbiAgICBzdGF0aWMgYWxpZ25IOnN0cmluZz1cImxlZnRcIjtcclxuICAgIHN0YXRpYyBzdGFydFNjZW5lOmFueT1cInNtaWxlL015U2Nyb2xsVmlldy5zY2VuZVwiO1xyXG4gICAgc3RhdGljIHNjZW5lUm9vdDpzdHJpbmc9XCJcIjtcclxuICAgIHN0YXRpYyBkZWJ1Zzpib29sZWFuPWZhbHNlO1xyXG4gICAgc3RhdGljIHN0YXQ6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBwaHlzaWNzRGVidWc6Ym9vbGVhbj1mYWxzZTtcclxuICAgIHN0YXRpYyBleHBvcnRTY2VuZVRvSnNvbjpib29sZWFuPXRydWU7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe31cclxuICAgIHN0YXRpYyBpbml0KCl7XHJcbiAgICAgICAgdmFyIHJlZzogRnVuY3Rpb24gPSBMYXlhLkNsYXNzVXRpbHMucmVnQ2xhc3M7XHJcbiAgICAgICAgcmVnKFwic21pbGUvTXlTY3JvbGxWaWV3LnRzXCIsTXlTY3JvbGxWaWV3KTtcclxuICAgIH1cclxufVxyXG5HYW1lQ29uZmlnLmluaXQoKTsiLCJpbXBvcnQgR2FtZUNvbmZpZyBmcm9tIFwiLi9HYW1lQ29uZmlnXCI7XHJcbmNsYXNzIE1haW4ge1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0Ly/moLnmja5JREXorr7nva7liJ3lp4vljJblvJXmk45cdFx0XHJcblx0XHRpZiAod2luZG93W1wiTGF5YTNEXCJdKSBMYXlhM0QuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCk7XHJcblx0XHRlbHNlIExheWEuaW5pdChHYW1lQ29uZmlnLndpZHRoLCBHYW1lQ29uZmlnLmhlaWdodCwgTGF5YVtcIldlYkdMXCJdKTtcclxuXHRcdExheWFbXCJQaHlzaWNzXCJdICYmIExheWFbXCJQaHlzaWNzXCJdLmVuYWJsZSgpO1xyXG5cdFx0TGF5YVtcIkRlYnVnUGFuZWxcIl0gJiYgTGF5YVtcIkRlYnVnUGFuZWxcIl0uZW5hYmxlKCk7XHJcblx0XHRMYXlhLnN0YWdlLnNjYWxlTW9kZSA9IEdhbWVDb25maWcuc2NhbGVNb2RlO1xyXG5cdFx0TGF5YS5zdGFnZS5zY3JlZW5Nb2RlID0gR2FtZUNvbmZpZy5zY3JlZW5Nb2RlO1xyXG5cdFx0Ly/lhbzlrrnlvq7kv6HkuI3mlK/mjIHliqDovb1zY2VuZeWQjue8gOWcuuaZr1xyXG5cdFx0TGF5YS5VUkwuZXhwb3J0U2NlbmVUb0pzb24gPSBHYW1lQ29uZmlnLmV4cG9ydFNjZW5lVG9Kc29uO1xyXG5cclxuXHRcdC8v5omT5byA6LCD6K+V6Z2i5p2/77yI6YCa6L+HSURF6K6+572u6LCD6K+V5qih5byP77yM5oiW6ICFdXJs5Zyw5Z2A5aKe5YqgZGVidWc9dHJ1ZeWPguaVsO+8jOWdh+WPr+aJk+W8gOiwg+ivlemdouadv++8iVxyXG5cdFx0aWYgKEdhbWVDb25maWcuZGVidWcgfHwgTGF5YS5VdGlscy5nZXRRdWVyeVN0cmluZyhcImRlYnVnXCIpID09IFwidHJ1ZVwiKSBMYXlhLmVuYWJsZURlYnVnUGFuZWwoKTtcclxuXHRcdGlmIChHYW1lQ29uZmlnLnBoeXNpY3NEZWJ1ZyAmJiBMYXlhW1wiUGh5c2ljc0RlYnVnRHJhd1wiXSkgTGF5YVtcIlBoeXNpY3NEZWJ1Z0RyYXdcIl0uZW5hYmxlKCk7XHJcblx0XHRpZiAoR2FtZUNvbmZpZy5zdGF0KSBMYXlhLlN0YXQuc2hvdygpO1xyXG5cdFx0TGF5YS5hbGVydEdsb2JhbEVycm9yID0gdHJ1ZTtcclxuXHJcblx0XHQvL+a/gOa0u+i1hOa6kOeJiOacrOaOp+WItu+8jHZlcnNpb24uanNvbueUsUlEReWPkeW4g+WKn+iDveiHquWKqOeUn+aIkO+8jOWmguaenOayoeacieS5n+S4jeW9seWTjeWQjue7rea1geeoi1xyXG5cdFx0TGF5YS5SZXNvdXJjZVZlcnNpb24uZW5hYmxlKFwidmVyc2lvbi5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vblZlcnNpb25Mb2FkZWQpLCBMYXlhLlJlc291cmNlVmVyc2lvbi5GSUxFTkFNRV9WRVJTSU9OKTtcclxuXHR9XHJcblxyXG5cdG9uVmVyc2lvbkxvYWRlZCgpOiB2b2lkIHtcclxuXHRcdC8v5r+A5rS75aSn5bCP5Zu+5pig5bCE77yM5Yqg6L295bCP5Zu+55qE5pe25YCZ77yM5aaC5p6c5Y+R546w5bCP5Zu+5Zyo5aSn5Zu+5ZCI6ZuG6YeM6Z2i77yM5YiZ5LyY5YWI5Yqg6L295aSn5Zu+5ZCI6ZuG77yM6ICM5LiN5piv5bCP5Zu+XHJcblx0XHRMYXlhLkF0bGFzSW5mb01hbmFnZXIuZW5hYmxlKFwiZmlsZWNvbmZpZy5qc29uXCIsIExheWEuSGFuZGxlci5jcmVhdGUodGhpcywgdGhpcy5vbkNvbmZpZ0xvYWRlZCkpO1xyXG5cdH1cclxuXHJcblx0b25Db25maWdMb2FkZWQoKTogdm9pZCB7XHJcblx0XHQvL+WKoOi9vUlEReaMh+WumueahOWcuuaZr1xyXG5cdFx0R2FtZUNvbmZpZy5zdGFydFNjZW5lICYmIExheWEuU2NlbmUub3BlbihHYW1lQ29uZmlnLnN0YXJ0U2NlbmUpO1xyXG5cdH1cclxufVxyXG4vL+a/gOa0u+WQr+WKqOexu1xyXG5uZXcgTWFpbigpO1xyXG4iLCIvKipcbiAqIENyZWF0ZWQgYnkganNyb2FkcyBvbiAyMDE5LTA1LTI4LjE2OjUzXG4gKiBOb3RlOlxuICovXG5leHBvcnQgZW51bSBESVJFQ1RJT04ge1xuICAgIExFRlQgPSAtMSxcbiAgICBSSUdIVCA9IDFcbn1cbmV4cG9ydCBjb25zdCBDRF9TUEFDRSA9IDEyMDtcbmV4cG9ydCBjb25zdCBDRF9HUklEID0gMzE2O1xuXG5leHBvcnQgaW50ZXJmYWNlIElQb3JrIHtcbiAgICB0aWQ6IG51bWJlcixcbiAgICBpY29uOiBzdHJpbmcsXG4gICAgc2hvdzogbnVtYmVyLFxuICAgIHN0YXI6IG51bWJlcixcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgdHlwZTogbnVtYmVyLFxuICAgIHVybDogc3RyaW5nLFxuICAgIGluZGV4OiBudW1iZXIsXG4gICAgcF9oZWlnaHQ6IG51bWJlcixcbiAgICBwX3dpZHRoOiBudW1iZXIsXG4gICAgcGVyY2VudDogbnVtYmVyLFxuICAgIG5leHRUaWQ6IG51bWJlcixcbiAgICBvcGVuOiBudW1iZXIsXG4gICAgc3RhdHVzVHlwZTogbnVtYmVyXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFDb25zdCB7XG4gICAgZ2V0IHN0YXJ0SWQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXJ0SWQ7XG4gICAgfVxuXG4gICAgc2V0IHN0YXJ0SWQodmFsdWU6IG51bWJlcikge1xuICAgICAgICB0aGlzLl9zdGFydElkID0gdmFsdWU7XG4gICAgfVxuICAgIHN0YXRpYyBnZXQgaW5zKCk6IERhdGFDb25zdCB7XG4gICAgICAgIGlmKCF0aGlzLl9pbnMpIHRoaXMuX2lucyA9IG5ldyBEYXRhQ29uc3QoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lucztcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0IGlucyh2YWx1ZTogRGF0YUNvbnN0KSB7XG4gICAgICAgIHRoaXMuX2lucyA9IHZhbHVlO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3N0YXJ0SWQ6bnVtYmVyID0gMTtcbiAgICBwcml2YXRlIHN0YXRpYyBfaW5zOiBEYXRhQ29uc3Q7XG59IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGpzcm9hZHMgb24gMjAxOS0wNS0yOC4xNzowOVxuICogTm90ZTpcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZUhlbHBlciB7XG4gICAgc3RhdGljIGdldCBpbnMoKTogR2FtZUhlbHBlciB7XG4gICAgICAgIGlmKCF0aGlzLl9pbnMpIHRoaXMuX2lucyA9IG5ldyBHYW1lSGVscGVyKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnM7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldCBpbnModmFsdWU6IEdhbWVIZWxwZXIpIHtcbiAgICAgICAgdGhpcy5faW5zID0gdmFsdWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2luczogR2FtZUhlbHBlcjtcbiAgICAvKipcbiAgICAgKiDmt7HluqblhYvpmoZcbiAgICAgKiDlr7nosaHlj6/ku6XlrozlhajohLHnprvljp/lr7nosaFcbiAgICAgKi9cbiAgICBwdWJsaWMgZGVlcENvcHkoc291cmNlKTogYW55IHtcbiAgICAgICAgbGV0IHRhcmdldDogYW55ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpID8gW10gOiB7fTtcbiAgICAgICAgZm9yICh2YXIgayBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc291cmNlW2tdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrXSA9IHRoaXMuZGVlcENvcHkoc291cmNlW2tdKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRba10gPSBzb3VyY2Vba11cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxuICAgIHB1YmxpYyBnZXRab3JkZXJCeUluZGV4KGluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBsZXQgejogbnVtYmVyID0gMDtcbiAgICAgICAgc3dpdGNoIChpbmRleCkge1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHogPSA4O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIHogPSA3O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHogPSA2O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIHogPSA1O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHogPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIHogPSAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHogPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHogPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHogPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHpcbiAgICB9XG59IiwiLyoqXG4gKiBDcmVhdGVkIGJ5IGpzcm9hZHMgb24gMjAxOS0wNS0yOC4xNjoyOFxuICogTm90ZTpcbiAqL1xuaW1wb3J0IHt1aX0gZnJvbSBcIi4uL3VpL2xheWFNYXhVSVwiO1xuaW1wb3J0IHtDRF9HUklELCBDRF9TUEFDRSwgSVBvcmt9IGZyb20gXCIuL0RhdGFDb25zdFwiO1xuaW1wb3J0IE15U2Nyb2xsSXRlbVVJID0gdWkuc21pbGUuTXlTY3JvbGxJdGVtVUk7XG5pbXBvcnQgR2FtZUhlbHBlciBmcm9tIFwiLi9HYW1lSGVscGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15U2Nyb2xsVmlldyBleHRlbmRzIE15U2Nyb2xsSXRlbVVJIHtcbiAgICBwdWJsaWMgaW5mbzogSVBvcms7XG4gICAgcHVibGljIFNJTkdMRV9TQ0FMRTogbnVtYmVyID0gNjQwO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YTogSVBvcmspIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5pbmZvID0gZGF0YTtcbiAgICAgICAgdGhpcy5zaXplKENEX0dSSUQsIENEX0dSSUQpO1xuICAgICAgICB0aGlzLmFuY2hvclggPSB0aGlzLmFuY2hvclkgPSAwLjU7XG4gICAgICAgIHRoaXMuU0lOR0xFX1NDQUxFID0gdGhpcy5pbmZvLnBfd2lkdGggLyA4MDtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25FbmFibGUoKSB7XG4gICAgICAgIHRoaXMueSA9IHRoaXMuaW5mby5wX2hlaWdodCAvIDI7XG4gICAgICAgIHRoaXMueCA9ICh0aGlzLmluZm8uaW5kZXggLSA0KSAqIENEX1NQQUNFICsgdGhpcy5pbmZvLnBfd2lkdGggLyAyO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImpzcm9hZHMtLS0tLS0gdGhpcy54OlwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy54KSk7XG4gICAgICAgIHRoaXMuc2V0Q0RTdGF0ZSgpO1xuICAgICAgICB0aGlzLnJlc2V0UmlnaHRTY2FsZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRDRFN0YXRlKCkge1xuICAgICAgICB0aGlzLnBvcmtJbWFnZS5sb2FkSW1hZ2UoXCJwb3JrL1wiICsgdGhpcy5pbmZvLmljb24pO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRUYXJnZXRQb3MoKSB7XG4gICAgICAgIExheWEuVHdlZW4uY2xlYXJBbGwodGhpcyk7XG4gICAgICAgIGxldCB0YXJnZXRYID0gKHRoaXMuaW5mby5pbmRleCAtIDQpICogQ0RfU1BBQ0UgKyB0aGlzLmluZm8ucF93aWR0aCAvIDI7XG4gICAgICAgIGxldCBzY2FsZSA9ICh0aGlzLmluZm8ucF93aWR0aCAqIDAuNSAtIE1hdGguYWJzKCh0aGlzLmluZm8ucF93aWR0aCAqIDAuNSAtIHRhcmdldFgpKSkgLyB0aGlzLlNJTkdMRV9TQ0FMRSAqIDAuMDEgKyAwLjY7XG4gICAgICAgIExheWEuVHdlZW4udG8odGhpcywge3g6IHRhcmdldFh9LCAxNTApO1xuICAgICAgICBMYXlhLlR3ZWVuLnRvKHRoaXMucG9ya0ltYWdlLCB7c2NhbGVYOiBzY2FsZSwgc2NhbGVZOiBzY2FsZX0sIDE1MCk7XG4gICAgICAgIGlmICh0aGlzLmluZm8uaW5kZXggPT0gNCkge1xuICAgICAgICAgICAgTGF5YS50aW1lci5sb29wKDMwLCB0aGlzLCB0aGlzLnVwZGF0ZVRpbWUsIFtdKVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuXG4gICAgcHVibGljIHJlc2V0UmlnaHRTY2FsZSgpIHtcbiAgICAgICAgbGV0IHNjYWxlID0gKHRoaXMuaW5mby5wX3dpZHRoICogMC41IC0gTWF0aC5hYnMoKHRoaXMuaW5mby5wX3dpZHRoICogMC41IC0gdGhpcy54KSkpIC8gdGhpcy5TSU5HTEVfU0NBTEUgKiAwLjAxICsgMC42O1xuICAgICAgICB0aGlzLnBvcmtJbWFnZS5zY2FsZShzY2FsZSwgc2NhbGUpO1xuICAgICAgICB0aGlzLnBvcmtJbWFnZS5zY2FsZVg7XG4gICAgICAgIGxldCB6T3JkZXIgPSBHYW1lSGVscGVyLmlucy5nZXRab3JkZXJCeUluZGV4KHRoaXMuaW5mby5pbmRleCk7XG4gICAgICAgIGlmICh6T3JkZXIgIT0gdGhpcy56T3JkZXIpIHtcbiAgICAgICAgICAgIHRoaXMuek9yZGVyID0gek9yZGVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0b3BUaW1lKCkge1xuICAgICAgICB0aGlzLnBvcmtJbWFnZS5yb3RhdGlvbiA9IDA7XG4gICAgICAgIExheWEudGltZXIuY2xlYXIodGhpcywgdGhpcy51cGRhdGVUaW1lKVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlVGltZSgpIHtcbiAgICAgICAgLy8gdGhpcy5wb3JrSW1hZ2Uucm90YXRpb24gKz0gMTtcbiAgICB9XG5cbn0iLCIvKipcbiAqIENyZWF0ZWQgYnkganNyb2FkcyBvbiAyMDE5LTA1LTI4LjE2OjI3XG4gKiBOb3RlOlxuICovXG5pbXBvcnQge3VpfSBmcm9tIFwiLi4vdWkvbGF5YU1heFVJXCI7XG5pbXBvcnQgRGF0YUNvbnN0LCB7Q0RfU1BBQ0UsIERJUkVDVElPTiwgSVBvcmt9IGZyb20gXCIuL0RhdGFDb25zdFwiO1xuaW1wb3J0IE15U2Nyb2xsVmlld1VJID0gdWkuc21pbGUuTXlTY3JvbGxWaWV3VUk7XG5pbXBvcnQgSGFuZGxlciA9IExheWEuSGFuZGxlcjtcbmltcG9ydCBFdmVudCA9IExheWEuRXZlbnQ7XG5pbXBvcnQgUG9pbnQgPSBMYXlhLlBvaW50O1xuaW1wb3J0IEdhbWVIZWxwZXIgZnJvbSBcIi4vR2FtZUhlbHBlclwiO1xuaW1wb3J0IE15U2Nyb2xsSXRlbSBmcm9tIFwiLi9NeVNjcm9sbEl0ZW1cIjtcbmV4cG9ydCBjb25zdCBNSURETEVfU0laRSA9IDQ7XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNeVNjcm9sbFZpZXcgZXh0ZW5kcyBNeVNjcm9sbFZpZXdVSXtcbiAgICBwdWJsaWMgc3RhdGljIFBPUktfQ0hBTkdFOiBzdHJpbmcgPSBcInBvcmtfY2hhbmdlXCI7Ly9QT1JL5pS55Y+YXG4gICAgcHJpdmF0ZSBwb3JrSnNvbjphbnk7XG4gICAgcHJpdmF0ZSBwb3JrTGlzdDogQXJyYXk8SVBvcms+O1xuICAgIHByaXZhdGUgY2RWaWV3TGlzdDogQXJyYXk8TXlTY3JvbGxJdGVtPiA9IFtdO1xuICAgIHByaXZhdGUgZGlyZWN0aW9uOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBzcGVlZDogbnVtYmVyO1xuICAgIHByaXZhdGUgYmVnaW5UaW1lOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBlbmRUaW1lOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIGJlZ2luUG9pbnQ6IFBvaW50O1xuICAgIHByaXZhdGUgdGVtcFBvaW50OiBQb2ludDtcbiAgICBwcml2YXRlIGVuZFRpbWVQb2ludDogUG9pbnQ7XG4gICAgcHJpdmF0ZSBjaGFuZ2VFdmVudDogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBjZFRlbXB0TGlzdDogQXJyYXk8YW55PiA9IFtdO1xuICAgIHByaXZhdGUgc3RhcnRJbmRleDogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIGVuZEluZGV4OiBudW1iZXIgPSAwO1xuICAgIHByaXZhdGUgY3VycmVudFBvcms6IElQb3JrO1xuXG4gICAgcHJpdmF0ZSByYXRlOiBudW1iZXIgPSAwLjk1O1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIHB1YmxpYyBvbkF3YWtlKCkge1xuICAgICAgICB0aGlzLm9uKE15U2Nyb2xsVmlldy5QT1JLX0NIQU5HRSwgdGhpcywgdGhpcy5jZENoYW5nZSk7XG4gICAgICAgIHRoaXMubG9hZEpTT04oKTtcbiAgICAgICAgdGhpcy5pbml0RXZlbnQoKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBpbml0Q0QoKSB7XG4gICAgICAgIGlmICghRGF0YUNvbnN0Lmlucy5zdGFydElkKSB7XG4gICAgICAgICAgICBEYXRhQ29uc3QuaW5zLnN0YXJ0SWQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9ya0xpc3QgPSBbXTtcbiAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMucG9ya0pzb24pIHtcbiAgICAgICAgICAgIHRoaXMucG9ya0xpc3QucHVzaCh0aGlzLnBvcmtKc29uW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucG9ya0xpc3Quc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGEudGlkID4gYi50aWQgPyAxIDogLTE7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSB0aGlzLmdldFBvcmtJbmRleChEYXRhQ29uc3QuaW5zLnN0YXJ0SWQpO1xuICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSB0aGlzLnN0YXJ0SW5kZXggJSB0aGlzLnBvcmtMaXN0Lmxlbmd0aDtcbiAgICAgICAgdGhpcy5lbmRJbmRleCA9IHRoaXMuc3RhcnRJbmRleDtcbiAgICAgICAgdGhpcy5jZFRlbXB0TGlzdC5wdXNoKHRoaXMuZ2V0Q3VyTXVzaWNGcm9tQ0QoKSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTUlERExFX1NJWkU7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNkO1xuICAgICAgICAgICAgY2QgPSB0aGlzLmdldE5leHRNdXNpY0Zyb21DRCgpO1xuICAgICAgICAgICAgdGhpcy5jZFRlbXB0TGlzdC5wdXNoKGNkKTtcbiAgICAgICAgICAgIGNkID0gdGhpcy5nZXRQcmVNdXNpY0Zyb21DRCgpO1xuICAgICAgICAgICAgdGhpcy5jZFRlbXB0TGlzdC51bnNoaWZ0KGNkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImpzcm9hZHMtLS0tLS1jZFRlbXB0TGlzdDpcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMuY2RUZW1wdExpc3QpKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNkVGVtcHRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbXNnOiBhbnkgPSB0aGlzLmNkVGVtcHRMaXN0W2ldO1xuICAgICAgICAgICAgbXNnLmluZGV4ID0gaTtcbiAgICAgICAgICAgIGxldCBjZFZpZXdMaXN0RWxlbWVudCA9IG5ldyBNeVNjcm9sbEl0ZW0obXNnKTtcbiAgICAgICAgICAgIGlmIChjZFZpZXdMaXN0RWxlbWVudC5pbmZvLmluZGV4ID09IDQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRNdXNpY05hbWUoY2RWaWV3TGlzdEVsZW1lbnQuaW5mbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNkVmlld0xpc3QucHVzaChjZFZpZXdMaXN0RWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDaGlsZChjZFZpZXdMaXN0RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIHNldEN1cnJlbnRNdXNpY05hbWUoaW5mbzogSVBvcmspIHtcbiAgICAgICAgLy8gU291bmRNZ3IuSW5zLnBsYXlTb3VuZChTb3VuZFVSTC5QSUNLKTtcbiAgICAgICAgdGhpcy5jdXJyZW50UG9yayA9IGluZm87XG4gICAgICAgIHRoaXMubmFtZVRleHQudGV4dCA9IGluZm8ubmFtZTtcbiAgICB9XG4gICAgcHVibGljIGdldFByZU11c2ljRnJvbUNEKCkge1xuICAgICAgICB0aGlzLnN0YXJ0SW5kZXgtLTtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRJbmRleCA9IHRoaXMucG9ya0xpc3QubGVuZ3RoIC0gMVxuICAgICAgICB9XG4gICAgICAgIGxldCBjZCA9IEdhbWVIZWxwZXIuaW5zLmRlZXBDb3B5KHRoaXMucG9ya0xpc3RbdGhpcy5zdGFydEluZGV4XSk7XG4gICAgICAgIGNkLnBfaGVpZ2h0ID0gdGhpcy5jb250YWluZXIuaGVpZ2h0O1xuICAgICAgICBjZC5wX3dpZHRoID0gdGhpcy5jb250YWluZXIud2lkdGg7XG4gICAgICAgIHJldHVybiBjZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TmV4dE11c2ljRnJvbUNEKCkge1xuICAgICAgICB0aGlzLmVuZEluZGV4Kys7XG4gICAgICAgIGlmICh0aGlzLmVuZEluZGV4ID49IHRoaXMucG9ya0xpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmVuZEluZGV4ID0gMFxuICAgICAgICB9XG4gICAgICAgIGxldCBjZCA9IEdhbWVIZWxwZXIuaW5zLmRlZXBDb3B5KHRoaXMucG9ya0xpc3RbdGhpcy5lbmRJbmRleF0pO1xuICAgICAgICBjZC5wX2hlaWdodCA9IHRoaXMuY29udGFpbmVyLmhlaWdodDtcbiAgICAgICAgY2QucF93aWR0aCA9IHRoaXMuY29udGFpbmVyLndpZHRoO1xuICAgICAgICByZXR1cm4gY2Q7XG4gICAgfVxuICAgIHByaXZhdGUgZ2V0UG9ya0luZGV4KHRpZCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucG9ya0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjZExpc3RFbGVtZW50ID0gdGhpcy5wb3JrTGlzdFtpXTtcbiAgICAgICAgICAgIGlmICh0aWQgPT0gY2RMaXN0RWxlbWVudC50aWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q3VyTXVzaWNGcm9tQ0QoKSB7XG4gICAgICAgIGxldCBjZCA9IEdhbWVIZWxwZXIuaW5zLmRlZXBDb3B5KHRoaXMucG9ya0xpc3RbdGhpcy5zdGFydEluZGV4XSk7XG4gICAgICAgIGNkLnBfaGVpZ2h0ID0gdGhpcy5jb250YWluZXIuaGVpZ2h0O1xuICAgICAgICBjZC5wX3dpZHRoID0gdGhpcy5jb250YWluZXIud2lkdGg7XG4gICAgICAgIHJldHVybiBjZDtcbiAgICB9XG4gICAgcHJpdmF0ZSBpbml0RXZlbnQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLm9uKEV2ZW50Lk1PVVNFX0RPV04sIHRoaXMsIChlKSA9PiB7XG4gICAgICAgICAgICBMYXlhLnRpbWVyLmNsZWFyKHRoaXMsIHRoaXMudXBkYXRlVGltZSk7XG4gICAgICAgICAgICB0aGlzLnJlc2V0Q0RFbGVtZW50KCk7XG4gICAgICAgICAgICB0aGlzLnN0YWdlLm9uKEV2ZW50Lk1PVVNFX09VVCwgdGhpcywgdGhpcy5vbk1vdXNlVXApO1xuICAgICAgICAgICAgdGhpcy5zdGFnZS5vbihFdmVudC5NT1VTRV9VUCwgdGhpcywgdGhpcy5vbk1vdXNlVXApO1xuICAgICAgICAgICAgTGF5YS5zdGFnZS5vbihFdmVudC5NT1VTRV9NT1ZFLCB0aGlzLCB0aGlzLm9uTW91c2VNb3ZlKTtcbiAgICAgICAgICAgIHRoaXMuYmVnaW5UaW1lID0gTGF5YS5Ccm93c2VyLm5vdygpO1xuICAgICAgICAgICAgdGhpcy5iZWdpblBvaW50ID0gbmV3IExheWEuUG9pbnQoZS5zdGFnZVgsIGUuc3RhZ2VZKTtcbiAgICAgICAgICAgIHRoaXMudGVtcFBvaW50ID0gbmV3IExheWEuUG9pbnQoZS5zdGFnZVgsIGUuc3RhZ2VZKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubGVmdEJ0bi5vbihFdmVudC5DTElDSywgdGhpcywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5sZWZ0TXVzaWMoKVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5yaWdodEJ0bi5vbihFdmVudC5DTElDSywgdGhpcywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5yaWdodE11c2ljKClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHByaXZhdGUgcmlnaHRDaGFuZ2UoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jZFZpZXdMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2RWaWV3TGlzdEVsZW1lbnQgPSB0aGlzLmNkVmlld0xpc3RbaV07XG4gICAgICAgICAgICBpZiAoY2RWaWV3TGlzdEVsZW1lbnQueCA+IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGxlZnRDaGFuZ2UoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jZFZpZXdMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2RWaWV3TGlzdEVsZW1lbnQgPSB0aGlzLmNkVmlld0xpc3RbaV07XG4gICAgICAgICAgICBpZiAoY2RWaWV3TGlzdEVsZW1lbnQueCA8IC0yNjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHByaXZhdGUgZ2V0RGlzdGFuY2UocG9zMTogUG9pbnQsIHBvczI6IFBvaW50KTogbnVtYmVyIHtcbiAgICAgICAgbGV0IHBvczogUG9pbnQgPSBuZXcgTGF5YS5Qb2ludChwb3MyLnggLSBwb3MxLngsIHBvczIueSAtIHBvczEueSk7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQocG9zLnggKiBwb3MueCArIHBvcy55ICogcG9zLnkpO1xuICAgIH1cbiAgICBwcml2YXRlIHNldENhcmRQb3NpdGlvbihkaXN0YW5jZTogbnVtYmVyKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jZFZpZXdMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2RWaWV3TGlzdEVsZW1lbnQgPSB0aGlzLmNkVmlld0xpc3RbaV07XG4gICAgICAgICAgICBjZFZpZXdMaXN0RWxlbWVudC54ICs9IE1hdGguZmxvb3IoZGlzdGFuY2UpO1xuICAgICAgICAgICAgY2RWaWV3TGlzdEVsZW1lbnQucmVzZXRSaWdodFNjYWxlKClcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sZWZ0Q2hhbmdlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuY2RDaGFuZ2UoRElSRUNUSU9OLkxFRlQpXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5yaWdodENoYW5nZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmNkQ2hhbmdlKERJUkVDVElPTi5SSUdIVClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKuenu+WIsOS6i+S7tuWkhOeQhiovXG4gICAgb25Nb3VzZU1vdmUoZTogRXZlbnQpIHtcbiAgICAgICAgbGV0IHBvaW50ID0gbmV3IExheWEuUG9pbnQoZS5zdGFnZVgsIGUuc3RhZ2VZKTtcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gcG9pbnQueCAtIHRoaXMudGVtcFBvaW50Lng7XG4gICAgICAgIHRoaXMudGVtcFBvaW50ID0gcG9pbnQ7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZGlzdGFuY2UgPiAwID8gRElSRUNUSU9OLlJJR0hUIDogRElSRUNUSU9OLkxFRlQ7XG4gICAgICAgIHRoaXMuc2V0Q2FyZFBvc2l0aW9uKGRpc3RhbmNlKTtcblxuICAgIH1cbiAgICAvKirmiqzotbfkuovku7blpITnkIYqL1xuICAgIHByaXZhdGUgb25Nb3VzZVVwKGU6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwianNyb2Fkcy0tLS0tLW9uTW91c2VVcDpcIiArIEpTT04uc3RyaW5naWZ5KFwib25Nb3VzZVVwXCIpKTtcbiAgICAgICAgTGF5YS5zdGFnZS5vZmYoRXZlbnQuTU9VU0VfVVAsIHRoaXMsIHRoaXMub25Nb3VzZVVwKTtcbiAgICAgICAgTGF5YS5zdGFnZS5vZmYoRXZlbnQuTU9VU0VfT1VULCB0aGlzLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgICAgIExheWEuc3RhZ2Uub2ZmKEV2ZW50Lk1PVVNFX01PVkUsIHRoaXMsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgICB0aGlzLmVuZFRpbWUgPSBMYXlhLkJyb3dzZXIubm93KCk7XG4gICAgICAgIHRoaXMuZW5kVGltZVBvaW50ID0gbmV3IExheWEuUG9pbnQoZS5zdGFnZVgsIGUuc3RhZ2VZKTtcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gdGhpcy5nZXREaXN0YW5jZSh0aGlzLmVuZFRpbWVQb2ludCwgdGhpcy5iZWdpblBvaW50KTtcbiAgICAgICAgaWYgKE1hdGguYWJzKGRpc3RhbmNlKSA8PSA1KSB7XG4gICAgICAgICAgICB0aGlzLnNldFBvc1RvVGFyZ2V0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zcGVlZCA9IE1hdGguYWJzKGRpc3RhbmNlKSAvICh0aGlzLmVuZFRpbWUgLSB0aGlzLmJlZ2luVGltZSkgKiAxMDtcbiAgICAgICAgaWYgKCh0aGlzLmVuZFRpbWVQb2ludC54IC0gdGhpcy5iZWdpblBvaW50LngpID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zcGVlZCAqPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zcGVlZCAqPSAtMTtcbiAgICAgICAgfVxuICAgICAgICBMYXlhLnRpbWVyLmxvb3AoMTAsIHRoaXMsIHRoaXMudXBkYXRlVGltZSwgW10pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVUaW1lKHRpbWVyLCBkdCkge1xuICAgICAgICB0aGlzLnNwZWVkID0gdGhpcy5zcGVlZCAqIHRoaXMucmF0ZTtcbiAgICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc3BlZWQpIDwgMSkge1xuICAgICAgICAgICAgTGF5YS50aW1lci5jbGVhcih0aGlzLCB0aGlzLnVwZGF0ZVRpbWUpO1xuICAgICAgICAgICAgdGhpcy5zZXRQb3NUb1RhcmdldCgpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jZFZpZXdMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2RWaWV3TGlzdEVsZW1lbnQgPSB0aGlzLmNkVmlld0xpc3RbaV07XG4gICAgICAgICAgICBjZFZpZXdMaXN0RWxlbWVudC54ICs9IE1hdGguZmxvb3IodGhpcy5zcGVlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGVmdENoYW5nZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmNkQ2hhbmdlKERJUkVDVElPTi5MRUZUKVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucmlnaHRDaGFuZ2UoKSkge1xuICAgICAgICAgICAgdGhpcy5jZENoYW5nZShESVJFQ1RJT04uUklHSFQpXG4gICAgICAgIH1cbiAgICB9XG4gICAgb25PcGVuZWQocGFyYW06IGFueSk6IHZvaWQge1xuXG4gICAgfVxuICAgIGxvYWRKU09OKCkge1xuICAgICAgICBsZXQgcG9ya1VSTCA9IFwianNvbi9wb3JrLmpzb25cIjtcbiAgICAgICAgTGF5YS5sb2FkZXIubG9hZChwb3JrVVJMLCBIYW5kbGVyLmNyZWF0ZShudWxsLCAoc3VjY2VzcykgPT4ge1xuICAgICAgICAgICAgdGhpcy5wb3JrSnNvbiA9IExheWEubG9hZGVyLmdldFJlcyhwb3JrVVJMKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic21pbGUtLS0tLS06XCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnBvcmtKc29uKSk7XG5cbiAgICAgICAgICAgIHRoaXMuaW5pdENEKCk7XG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBjZENoYW5nZShjaGFuZ2VFdmVudCkge1xuICAgICAgICB0aGlzLmNoYW5nZUV2ZW50ID0gY2hhbmdlRXZlbnQ7XG4gICAgICAgIGlmICh0aGlzLmNoYW5nZUV2ZW50ID09IERJUkVDVElPTi5MRUZUKSB7XG4gICAgICAgICAgICBsZXQgZmlyc3QgPSB0aGlzLmNkVmlld0xpc3Quc2hpZnQoKTtcbiAgICAgICAgICAgIGZpcnN0LnggPSB0aGlzLmNkVmlld0xpc3RbdGhpcy5jZFZpZXdMaXN0Lmxlbmd0aCAtIDFdLnggKyBDRF9TUEFDRTtcbiAgICAgICAgICAgIGZpcnN0LmluZm8gPSB0aGlzLmdldE5leHRNdXNpY0Zyb21DRCgpO1xuICAgICAgICAgICAgdGhpcy5jZFZpZXdMaXN0LnB1c2goZmlyc3QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IGVuZCA9IHRoaXMuY2RWaWV3TGlzdC5wb3AoKTtcbiAgICAgICAgICAgIGVuZC54ID0gdGhpcy5jZFZpZXdMaXN0WzBdLnggLSBDRF9TUEFDRTtcbiAgICAgICAgICAgIGVuZC5pbmZvID0gdGhpcy5nZXRQcmVNdXNpY0Zyb21DRCgpO1xuICAgICAgICAgICAgdGhpcy5jZFZpZXdMaXN0LnVuc2hpZnQoZW5kKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0Q0RTY2FsZSgpO1xuICAgIH1cbiAgICBzZXRDRFNjYWxlKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2RWaWV3TGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNkVmlld0xpc3RFbGVtZW50ID0gdGhpcy5jZFZpZXdMaXN0W2ldO1xuICAgICAgICAgICAgY2RWaWV3TGlzdEVsZW1lbnQuaW5mby5pbmRleCA9IGk7XG4gICAgICAgICAgICBpZiAoaSA9PSA0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDdXJyZW50TXVzaWNOYW1lKGNkVmlld0xpc3RFbGVtZW50LmluZm8pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2RWaWV3TGlzdEVsZW1lbnQuc2V0Q0RTdGF0ZSgpO1xuICAgICAgICAgICAgY2RWaWV3TGlzdEVsZW1lbnQucmVzZXRSaWdodFNjYWxlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzZXRDREVsZW1lbnQoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jZFZpZXdMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2RWaWV3TGlzdEVsZW1lbnQgPSB0aGlzLmNkVmlld0xpc3RbaV07XG4gICAgICAgICAgICBjZFZpZXdMaXN0RWxlbWVudC5zdG9wVGltZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0UG9zVG9UYXJnZXQoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jZFZpZXdMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2RWaWV3TGlzdEVsZW1lbnQgPSB0aGlzLmNkVmlld0xpc3RbaV07XG4gICAgICAgICAgICBjZFZpZXdMaXN0RWxlbWVudC5zZXRUYXJnZXRQb3MoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIGxlZnRNdXNpYygpIHtcbiAgICAgICAgdGhpcy5yZXNldENERWxlbWVudCgpO1xuICAgICAgICB0aGlzLmNkQ2hhbmdlKERJUkVDVElPTi5SSUdIVCk7XG4gICAgICAgIHRoaXMuc2V0UG9zVG9UYXJnZXQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJpZ2h0TXVzaWMoKSB7XG4gICAgICAgIHRoaXMucmVzZXRDREVsZW1lbnQoKTtcbiAgICAgICAgdGhpcy5jZENoYW5nZShESVJFQ1RJT04uTEVGVCk7XG4gICAgICAgIHRoaXMuc2V0UG9zVG9UYXJnZXQoKTtcbiAgICB9XG59XG4iLCIvKipUaGlzIGNsYXNzIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IExheWFBaXJJREUsIHBsZWFzZSBkbyBub3QgbWFrZSBhbnkgbW9kaWZpY2F0aW9ucy4gKi9cbmltcG9ydCBWaWV3PUxheWEuVmlldztcclxuaW1wb3J0IERpYWxvZz1MYXlhLkRpYWxvZztcclxuaW1wb3J0IFNjZW5lPUxheWEuU2NlbmU7XG52YXIgUkVHOiBGdW5jdGlvbiA9IExheWEuQ2xhc3NVdGlscy5yZWdDbGFzcztcbmV4cG9ydCBtb2R1bGUgdWkuc21pbGUge1xyXG4gICAgZXhwb3J0IGNsYXNzIE15U2Nyb2xsSXRlbVVJIGV4dGVuZHMgVmlldyB7XHJcblx0XHRwdWJsaWMgcG9ya0ltYWdlOkxheWEuU3ByaXRlO1xuICAgICAgICBjb25zdHJ1Y3RvcigpeyBzdXBlcigpfVxyXG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHN1cGVyLmNyZWF0ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNjZW5lKFwic21pbGUvTXlTY3JvbGxJdGVtXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFJFRyhcInVpLnNtaWxlLk15U2Nyb2xsSXRlbVVJXCIsTXlTY3JvbGxJdGVtVUkpO1xyXG4gICAgZXhwb3J0IGNsYXNzIE15U2Nyb2xsVmlld1VJIGV4dGVuZHMgU2NlbmUge1xyXG5cdFx0cHVibGljIGNvbnRhaW5lcjpMYXlhLlNwcml0ZTtcblx0XHRwdWJsaWMgbGVmdEJ0bjpMYXlhLkJ1dHRvbjtcblx0XHRwdWJsaWMgcmlnaHRCdG46TGF5YS5CdXR0b247XG5cdFx0cHVibGljIG5hbWVUZXh0OmxheWEuZGlzcGxheS5UZXh0O1xuICAgICAgICBjb25zdHJ1Y3RvcigpeyBzdXBlcigpfVxyXG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKCk6dm9pZCB7XHJcbiAgICAgICAgICAgIHN1cGVyLmNyZWF0ZUNoaWxkcmVuKCk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFNjZW5lKFwic21pbGUvTXlTY3JvbGxWaWV3XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIFJFRyhcInVpLnNtaWxlLk15U2Nyb2xsVmlld1VJXCIsTXlTY3JvbGxWaWV3VUkpO1xyXG59XHIiXX0=
